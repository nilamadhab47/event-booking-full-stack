{
  "openapi": "3.0.3",
  "info": {
    "version": "4.0",
    "title": "18 Candleriggs",
    "description": "This is the Candleriggs Server based on the OpenAPI 3.0 specification.",
    "contact": {
      "name": "Superminds",
      "email": "contact@superminds.dev"
    }
  },
  "paths": {
    "/api/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Authenticate a User",
        "description": "Authenticates and creates a JWT cookie",
        "operationId": "loginPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@email.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "my password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "data": {
                      "type": "string",
                      "example": "User Logged In"
                    }
                  }
                }
              }
            },
            "description": "Log in successful"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Data not found"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Not authorised"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid data"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/logout": {
      "get": {
        "tags": [
          "Logout"
        ],
        "summary": "Logout a User",
        "description": "Logout a User and deletes its JWT",
        "operationId": "logoutGET",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "data": {
                      "type": "string",
                      "example": "User Logged Out"
                    }
                  }
                }
              }
            },
            "description": "Log out success"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Data not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/banner": {
      "get": {
        "tags": [
          "Banners"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Returns all banners from database",
        "description": "This endpoint will return all banners from database.\n    \n__How To__\n\nClick 'try it out'. Then click 'execute'.\n \n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 200              | OK          | Got all banners.                            |\n  | 500              | SERVER ERROR| If any server error occured                 |\n  \n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "all banners"
                    },
                    "numberOfResults": {
                      "type": "boolean",
                      "example": 100
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "6396d77af21cd7c7776ed4c6"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/Banner"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "description": "Banners list"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      },
      "post": {
        "tags": [
          "Banners"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Create a new banner",
        "description": "This endpoint will create a banner in database.\n    \n__How To__\n\nFill the **request body** with the data you want to create and click **execute**.\n\n__Below is the list of possible *event types* of the Banner__\n\n * Live\n * Sold Out\n * Cancelled\n * Private Booking\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 201              | CREATED     | Created one banner.                         |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 422              | BAD REQUEST | If the banner data is in an invalid format. |\n | 500              | SERVER ERROR| If any server error occured                 |\n",
        "operationId": "bannersPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BannerWithoutImages"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Banner created successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "634fb000db57c5d00b37c658"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Banner"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Created banner"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation Errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Internal Server Error: {message}"
          }
        }
      }
    },
    "/api/banner/{bannerId}": {
      "get": {
        "security": [
          {
            "SessionToken": []
          }
        ],
        "tags": [
          "Banners"
        ],
        "summary": "View a banner by ObjectID",
        "description": "This endpoint will return a banner using bannerID.\n\n__How To__\n\nIf you dont have a bannerID hit an endpoint **GET /api/banner** and get a valid bannerID\n\n__Below is the list of possible *event types* of the Banner__\n\n * Live\n * Sold Out\n * Cancelled\n * Private Booking\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Return one banner.                       |\n  | 404              | NOT FOUND   | If this bannerId not found.              |\n  | 422              | BAD REQUEST | If the bannerId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "bannersIdGET",
        "parameters": [
          {
            "name": "bannerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return one banner.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "result": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Banner"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "6396d77af21cd7c7776ed4c6"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation Errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Banners"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Update a banner using objectID",
        "description": "This endpoint is used to edit/update a banner using bannerID.\n\n__How To__\n\nIf you dont have a bannerID hit an endpoint **GET /api/banner** and get a valid bannerID\n\n__Below is the list of possible *event types* of the Banner__\n\n * Live\n * Sold Out\n * Cancelled\n * Private Booking\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Return one banner.                       |\n  | 400              | BAD REQUEST | Reqested with invalid data.              |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this bannerId not found.              |\n  | 422              | BAD REQUEST | If the bannerId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "bannersIdPUT",
        "parameters": [
          {
            "name": "bannerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BannerWithoutImages"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "updated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "Updated successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Banner"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "634fb000db57c5d00b37c658"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: Unauthenticated"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "BannerID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id format provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Banners"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete a banner and it's related images using objectID",
        "description": "This endpoint is used to delete a banner using bannerID.\n\n__How To__\n\n1. If you dont have a bannerID hit an endpoint **GET /api/banner** and get a valid bannerID. \n2. Fill the bannerID and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Return one banner.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this bannerId not found.              |\n  | 422              | BAD REQUEST | If the bannerId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "bannersIdDELETE",
        "parameters": [
          {
            "name": "bannerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully deleted"
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "BannerID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/banner/upload-desktop-image/{bannerId}": {
      "post": {
        "tags": [
          "Banners"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Upload a banner desktop image",
        "description": "This endpoint is used to upload desktop banner image using bannerID.\n\n__How To__\n\n1. If you dont have a bannerID hit an endpoint **GET /api/banner** and get a valid bannerID\n2. Fill the bannerID.\n3. Select image to upload and click execute\n\n**Accepted image formats**\n1. png\n\n2. jpg\n\n3. jpeg\n\n **Accepted size and dimensions (width & height)** \n\nsize : under 1MB\n\nwidth: 1440px\n\nheight: 692px\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 201              | CREATED          | Banner desktop image created successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this bannerId not found.              |\n  | 422              | BAD REQUEST | If the bannerId is in an invalid format or body is not according to validations. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "bannerDesktopImageUpload",
        "parameters": [
          {
            "name": "bannerId",
            "in": "path",
            "required": true,
            "description": "The Id of the banner to upload desktop image",
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Banner desktop image successfully uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Uploaded successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "63982444dd330c6edc3e3c9b"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Banner"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "ObjectID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Banners"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete the desktop image of a banner using bannerID",
        "description": "This endpoint is used to delete a desktop image of a banner using bannerID.\n\n__How To__\n\n1. If you dont have a bannerID hit an endpoint **GET /api/banner** and get a valid bannerID. \n2. Fill the bannerID and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Image deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this bannerId not found.              |\n  | 422              | BAD REQUEST | If the bannerId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "bannerDesktopImageDELETE",
        "parameters": [
          {
            "name": "bannerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "Deleted successfully"
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "BannerID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/banner/upload-mobile-image/{bannerId}": {
      "post": {
        "tags": [
          "Banners"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Upload a banner mobile image",
        "description": "This endpoint is used to upload mobile banner image using bannerID.\n\n **How To**\n\n 1. If you dont have a bannerID hit an endpoint **GET /api/banner** and get a valid bannerID\n2. Fill the bannerID.\n3. Select image to upload and click execute\n\n **Accepted image formats**\n\n1. png\n\n2. jpg\n\n3. jpeg\n\n**Accepted size and dimensions (width & height)**\n\nMobile banner size : under 500kb\n\nwidth: 640px\n\nheight: 360px\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 201              | CREATED          | Banner mobile image created successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this bannerId not found.              |\n  | 422              | BAD REQUEST | If the bannerId is in an invalid format or body format not according to validations. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "bannersMobileImageUpload",
        "parameters": [
          {
            "name": "bannerId",
            "in": "path",
            "required": true,
            "description": "The Id of the banner to upload mobile image",
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Banner mobile image successfully uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Uploaded successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "63982444dd330c6edc3e3c9b"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Banner"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "ObjectID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Banners"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete the mobile image of a banner using bannerID",
        "description": "This endpoint is used to delete a mobile image of a banner using bannerID.\n\n__How To__\n\n1. If you dont have a bannerID hit an endpoint **GET /api/banner** and get a valid bannerID. \n2. Fill the bannerID and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Image deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this bannerId not found.              |\n  | 422              | BAD REQUEST | If the bannerId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "bannerMobileImageDELETE",
        "parameters": [
          {
            "name": "bannerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "Deleted successfully"
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "BannerID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/event": {
      "get": {
        "tags": [
          "Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "View all events from database",
        "description": "This endpoint will return all events from database.\n    \n__How To__\n\nClick 'try it out'. Then click 'execute'.\n \n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 200              | OK          | Got all events.                            |\n  | 500              | SERVER ERROR| If any server error occured                 |\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "all events"
                    },
                    "numberOfResults": {
                      "type": "boolean",
                      "example": 100
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "63982444dd330c6edc3e3c9b"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/Event"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "description": "All events"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      },
      "post": {
        "tags": [
          "Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Create a new event",
        "description": "This endpoint will create a new banner in database.\n    \n__How To__\n\n 1. Click **'try it out'**.\n\n 2. Fill the request body with valid data.\n\n 3. Click **execute** \n  \n\n Below is the list of possible *event types* of the Event\n\n * Live\n * Sold Out\n * Cancelled\n * Private Booking\n\n \n\nBelow is the list of possible *select age* of the Event\n\n * 18+\n * all ages\n  * don't show \n\n  \n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 200              | OK          | Got all banners.                            |\n  | 500              | SERVER ERROR| If any server error occurred                 |\n  \n",
        "operationId": "eventsPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventWithoutImages"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Event created successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "638a04d6fecb7c398c549e31"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Event"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Event Created"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/event/{eventId}": {
      "get": {
        "security": [
          {
            "SessionToken": []
          }
        ],
        "tags": [
          "Events"
        ],
        "summary": "View a event using objectID",
        "description": "This endpoint will return a event using eventID.\n\n__How To__\n\nIf you dont have a eventID hit an endpoint **GET /api/event** and get a valid eventID\n\n**Below is the list of possible *event types* of the Event**\n\n * Live\n * Sold Out\n * Cancelled\n * Private Booking\n\n \n\n **Below is the list of possible *select age* of the Event**\n\n * 18+\n * all ages\n  * don't show \n\n **The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Return one event.                       |\n  | 404              | NOT FOUND   | If this eventId not found.              |\n  | 422              | BAD REQUEST | If the eventId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "eventsIdGET",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Event"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Event not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid objectID"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      },
      "put": {
        "tags": [
          "Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Update a event using objectID",
        "description": "This endpoint is used to edit/update a event using eventID.\n\n__How To__\n\nIf you dont have a eventID hit an endpoint **GET /api/event** and get a valid eventID\n\n**Below is the list of possible *event types* of the Event**\n\n * Live\n * Sold Out\n * Cancelled\n * Private Booking\n\n \n\n **Below is the list of possible *select age* of the Event**\n\n * 18+\n * all ages\n  * don't show \n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Return one event.                       |\n  | 400              | BAD REQUEST | Reqested with invalid data.              |\n  | 404              | NOT FOUND   | If this eventId not found.              |\n  | 422              | BAD REQUEST | If the eventId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "eventsIdPUT",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The Id of the event to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventWithoutImages"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully updated"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Event"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Event not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete a event (it does not delete its related images, we need to call this separately)",
        "operationId": "eventsIdDELETE",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The Id of the event to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "Successfully Deleted"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Event not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/event/active": {
      "get": {
        "tags": [
          "Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "View all active events",
        "description": "This endpoint will return all active events from database.\n    \n__How To__\n\nClick 'try it out'. Then click 'execute'.\n \n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 200              | OK          | Got all  active banners.                            |\n  | 500              | SERVER ERROR| If any server error occured                 |\n  \n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "numberOfResults": {
                      "type": "number",
                      "example": 100
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "6396d77af21cd7c7776ed4c6"
                              },
                              "seoFriendlyURL": {
                                "type": "string",
                                "example": "cabaret-show-by-wild-cabaret-2023-01-21"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/Event"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "description": "Event objects list"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Event not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/event/seo-friendly-url/{seoFriendlyUrl}": {
      "get": {
        "security": [
          {
            "SessionToken": []
          }
        ],
        "tags": [
          "Events"
        ],
        "summary": "View a event using Event name and date ",
        "description": "This endpoint will return a event using Event name.\n\n__How To__\n\nIf you dont have a Event name hit an endpoint **GET /api/event/active** and get a valid Event name and add event date with hyphen **example: cabaret-show-by-wild-cabaret-2023-01-21** \n\n**Below is the list of possible *event types* of the Event**\n\n * Live\n * Sold Out\n * Cancelled\n * Private Booking\n\n \n\n **Below is the list of possible *select age* of the Event**\n\n * 18+\n * all ages\n  * don't show \n\n **The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Return one event.                       |\n  | 404              | NOT FOUND   | If this event name not found.              |\n  | 422              | BAD REQUEST | If the event name is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "eventsByNameGET",
        "parameters": [
          {
            "name": "seoFriendlyUrl",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "cabaret-show-by-wild-cabaret-2023-01-21"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Event"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Event not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid objectID"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/event/upload-desktop-image/{eventId}": {
      "post": {
        "tags": [
          "Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Upload a event desktop image",
        "description": "This endpoint is used to upload desktop event image using eventID.\n\n__How To__\n\n1. If you dont have a eventID hit an endpoint **GET /api/event** and get a valid eventID\n2. Fill the eventID.\n3. Select image to upload and click execute\n\n**Accepted image formats**\n1. png\n\n2. jpg\n\n3. jpeg\n\n **Accepted size and dimensions (width & height)** \n\nDesktop event size : under 500kb\n\nwidth: 333px\n\nheight: 450px",
        "operationId": "eventDesktopImageUpload",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The Id of the event to upload desktop image",
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Successfully uploaded"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Event"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "ObjectID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete the desktop image of an event using eventID",
        "description": "This endpoint is used to delete a desktop image of an event using eventID.\n\n__How To__\n\n1. If you dont have an eventID hit an endpoint **GET /api/event** and get a valid eventID. \n2. Fill the eventID and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Image deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this eventId not found.              |\n  | 422              | BAD REQUEST | If the eventId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "eventDesktopImageDELETE",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "Deleted successfully"
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "BannerID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/event/upload-mobile-image/{eventId}": {
      "post": {
        "tags": [
          "Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Upload a event mobile image",
        "description": "This endpoint is used to upload mobile event image using eventID.\n\n__How To__\n\n1. If you dont have a eventID hit an endpoint **GET /api/event** and get a valid eventID\n2. Fill the eventID.\n3. Select image to upload and click execute\n\n**Accepted image formats**\n1. png\n\n2. jpg\n\n3. jpeg\n\n **Accepted size and dimensions (width & height)** \n\nImage size : under 200kb\n\nwidth: 280px\n\nheight: 380px",
        "operationId": "eventMobileImageUpload",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The Id of the event to upload mobile image",
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Successfully uploaded"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Event"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "ObjectID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete the mobile image of an event using eventID",
        "description": "This endpoint is used to delete a mobile image of an event using eventID.\n\n__How To__\n\n1. If you dont have an eventID hit an endpoint **GET /api/event** and get a valid eventID. \n2. Fill the eventID and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Image deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this eventId not found.              |\n  | 422              | BAD REQUEST | If the eventId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "eventMobileImageDELETE",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "Deleted successfully"
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "eventID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/event/duplicate/{eventId}": {
      "get": {
        "security": [
          {
            "SessionToken": []
          }
        ],
        "tags": [
          "Events"
        ],
        "summary": "Duplicate an Event",
        "description": "All Event data should be duplicated, apart from the Event displayEventListingFrom\n\n__How To__\n\nIf you dont have a eventID hit an endpoint **GET /api/event** and get a valid eventID\n\n **The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Return one event.                       |\n  | 404              | NOT FOUND   | If this eventId not found.              |\n  | 422              | BAD REQUEST | If the eventId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "eventsDuplicateGET",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Duplicated OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Event"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Event not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid objectID"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/gallery": {
      "post": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Create a gallery collection",
        "description": "This endpoint will create a image collection in database.\n    \n__How To__\n\n1. Click **try it out**. \n\n 2. Fill the category data.\n\n 3. Then click **execute**.\n \n**The below table defines the HTTP Status codes that this API may return**\n\n|Status Code|Description|Reason|\n|-|-|-|\n|201|CREATED|Created gallery.|\n|422|Unprocessable Entity|Validation errors.|\n|500|SERVER ERROR|If any server error occurred|\n \n\n**Below is the list of all possible category** \n\n1. Venue \n\n 2. Events \n\n3.  Food \n\n  \n",
        "operationId": "GalleryCollectionPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "category": {
                    "type": "string",
                    "enum": [
                      "Venue",
                      "Events",
                      "Food"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "example": "Turkish eggs"
                  },
                  "order": {
                    "type": "number",
                    "example": 0
                  },
                  "altText": {
                    "type": "string",
                    "example": "Girl in jacket"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Gallery's collection created"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "63a4522700f6553f757ee87d"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Gallery"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Created Gallery's collection"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation Errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      },
      "get": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Returns all Gallery images from database",
        "description": "This endpoint will return all gallery images from database.\n    \n__How To__\n\nClick 'try it out'. Then click 'execute'.\n \n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 200              | OK          | Got all gallery images.                            |\n  | 500              | SERVER ERROR| If any server error occurred                 |\n  \n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "numberOfResults": {
                      "type": "boolean",
                      "example": 100
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "63a4522700f6553f757ee87d"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/Gallery"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "description": "Gallery list"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/gallery/{collectionId}": {
      "delete": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete a gallery collection and its related images using objectID",
        "description": "__How To__\n\n1. If you dont have a collectionId hit an endpoint **GET /api/gallery** and get a valid collectionId. \n2. Fill the collectionId and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this collectionId not found.              |\n  | 422              | BAD REQUEST | If the collectionId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "galleryCollectionDELETE",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully deleted"
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "collectionId not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      },
      "get": {
        "security": [
          {
            "SessionToken": []
          }
        ],
        "tags": [
          "Gallery"
        ],
        "summary": "View a gallery collection using objectID",
        "description": "This endpoint will return a gallery collection using collectionID.\n\n__How To__\n\nIf you dont have a collectionID hit an endpoint **GET /api/gallery** and get a valid collectionID\n\n| Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Return one gallery collection.                       |\n  | 404              | NOT FOUND   | If this collectionID not found.              |\n  | 422              | BAD REQUEST | If the collectionID is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "galleryCollectionIdGET",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gallery collection object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Gallery"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "collection not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid objectID"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      },
      "put": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Update a collection using objectID",
        "description": "This endpoint is used to edit/update a event using collectionID.\n\n__How To__\n\nIf you dont have a collectionID hit an endpoint **GET /api/gallery** and get a valid collectionID\n\n| Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Update one gallery collection.                       |\n  | 400              | BAD REQUEST | Requested with invalid data.              |\n  | 404              | NOT FOUND   | If this collectionID not found.              |\n  | 422              | BAD REQUEST | If the collectionID is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "collectionIdPUT",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "The Id of the gallery collection to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "category": {
                    "type": "string",
                    "enum": [
                      "Venue",
                      "Events",
                      "Food"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "example": "Turkish eggs"
                  },
                  "order": {
                    "type": "number",
                    "example": 0
                  },
                  "altText": {
                    "type": "string",
                    "example": "Girl in jacket"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gallery collection object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully updated"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Gallery"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "collection not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/gallery/web-image-small/{collectionId}": {
      "post": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Upload a gallery web image small ",
        "description": "This endpoint is used to upload  gallery web image small using ObjectID.\n\n__How To__\n\n1. If you dont have a ObjectID hit an endpoint **[POST] /api/gallery** and get a valid objectID\n2. Fill the objectID.\n3. Select image to upload and click execute\n\n**Accepted image formats**\n1. png\n\n2. jpg\n\n3. jpeg\n\n **Accepted size and dimensions (width & height)** \n\nAccepted image size : under 500KB\n\nwidth: 305px\n\nheight: 290px\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 201              | CREATED          | Image created successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this collectionId not found.              |\n  | 422              | BAD REQUEST | If the collectionId is in an invalid format or image not correct. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "Gallery-web-small",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "description": "The Id of the collection to upload web image small",
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "object",
                "properties": {
                  "webImageSmall": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Image created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Uploaded successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "63a4522700f6553f757ee87d"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Gallery"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "ObjectID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete the web image small of a gallery collection",
        "description": "__How To__\n\n1. If you dont have a collectionId hit an endpoint **GET /api/gallery** and get a valid collectionId. \n2. Fill the collectionId and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Image deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this collectionId not found.              |\n  | 422              | BAD REQUEST | If the collectionId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "galleryWebImageSmallDELETE",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully deleted"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            },
                            "smallWebImage": {
                              "type": "string",
                              "example": ""
                            },
                            "bigWebImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            },
                            "smallMobileImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            },
                            "bigMobileImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/GalleryWithoutImages"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "BannerID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/gallery/web-image-big/{collectionId}": {
      "post": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Upload a gallery web image big ",
        "description": "__How To__\n\n1. If you dont have a ObjectID hit an endpoint **[POST]/api/gallery** and get a valid ObjectID\n2. Fill the ObjectID.\n3. Select image to upload and click execute\n\n**Accepted image formats**\n1. png\n\n2. jpg\n\n3. jpeg\n\n **Accepted size and dimensions (width & height)** \n\nAccepted image size : under 500KB\n\nwidth: 630px\n\nheight: 600px\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 201              | CREATED          | Image created successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this collectionId not found.              |\n  | 422              | BAD REQUEST | If the collectionId is in an invalid format or image not correct. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "galleryWebImageBigPOST",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "description": "The Id of the collection to upload web image big",
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "object",
                "properties": {
                  "webImageBig": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Image created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Uploaded successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "63a4522700f6553f757ee87d"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Gallery"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "ObjectID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete the web image big of a gallery collection",
        "description": "__How To__\n\n1. If you dont have a collectionId hit an endpoint **GET /api/gallery** and get a valid collectionId. \n2. Fill the collectionId and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Image deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this collectionId not found.              |\n  | 422              | BAD REQUEST | If the collectionId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "galleryWebImageBigDelete",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully deleted"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            },
                            "smallWebImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            },
                            "bigWebImage": {
                              "type": "string",
                              "example": ""
                            },
                            "smallMobileImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            },
                            "bigMobileImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/GalleryWithoutImages"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "BannerID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/gallery/mobile-image-small/{collectionId}": {
      "post": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Upload a gallery mobile image small ",
        "description": "This endpoint is used to upload  gallery mobile image small using ObjectID.\n\n__How To__\n\n1. If you dont have a ObjectID hit an endpoint **[POST]/api/gallery** and get a valid ObjectID\n2. Fill the ObjectID.\n3. Select image to upload and click execute\n\n**Accepted image formats**\n1. png\n\n2. jpg\n\n3. jpeg\n\n **Accepted size and dimensions (width & height)** \n\nAccepted image size size : under 200kb\n\nwidth: 130px\n\nheight: 130px\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 201              | CREATED          | Image created successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this collectionId not found.              |\n  | 422              | BAD REQUEST | If the collectionId is in an invalid format or image not correct. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "galleryMobileSmallPOST",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "description": "The Id of the collection to upload mobile image small",
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "object",
                "properties": {
                  "mobileImageSmall": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Image created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Uploaded successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "63a4522700f6553f757ee87d"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Gallery"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "ObjectID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete the mobile image small of a gallery collection",
        "description": "__How To__\n\n1. If you dont have a collectionId hit an endpoint **GET /api/gallery** and get a valid collectionId. \n2. Fill the collectionId and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Image deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this collectionId not found.              |\n  | 422              | BAD REQUEST | If the collectionId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "galleryMobileImageSmallDelete",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully deleted"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            },
                            "smallWebImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            },
                            "bigWebImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            },
                            "smallMobileImage": {
                              "type": "string",
                              "example": ""
                            },
                            "bigMobileImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/GalleryWithoutImages"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "BannerID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/gallery/mobile-image-big/{collectionId}": {
      "post": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Upload a gallery mobile image big ",
        "description": "This endpoint is used to upload  gallery mobile image big using ObjectID.\n\n__How To__\n\n1. If you dont have a ObjectID hit an endpoint **[POST]/api/gallery** and get a valid ObjectID\n2. Fill the ObjectID.\n3. Select image to upload and click execute\n\n**Accepted image formats**\n1. png\n\n2. jpg\n\n3. jpeg\n\n **Accepted size and dimensions (width & height)** \n\nAccepted image size size : under 500KB\n\nwidth: 280px\n\nheight: 270px",
        "operationId": "Gallery-mobile-big",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "description": "The Id of the collection to upload mobile image big",
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "object",
                "properties": {
                  "mobileImageBig": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Gallery object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Uploaded successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "63a4522700f6553f757ee87d"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/Gallery"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "ObjectID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Gallery"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete the mobile image big of a gallery collection",
        "description": "__How To__\n\n1. If you dont have a collectionId hit an endpoint **GET /api/gallery** and get a valid collectionId. \n2. Fill the collectionId and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Image deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this collectionId not found.              |\n  | 422              | BAD REQUEST | If the collectionId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "galleryMobileImageBigDelete",
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully deleted"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            },
                            "smallWebImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            },
                            "bigWebImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            },
                            "smallMobileImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
                            },
                            "bigMobileImage": {
                              "type": "string",
                              "example": ""
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/GalleryWithoutImages"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Gallery collectionId not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/subscriber": {
      "post": {
        "tags": [
          "Subscriber"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Create a Subscriber",
        "description": "This endpoint will create a a subscriber in database.\n    \n__How To__\n\n1. Click **try it out**. \n\n 2. Fill the subscriber data.\n\n 3. Then click **execute**.\n \n**The below table defines the HTTP Status codes that this API may return**\n\n | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 201              | CREATED          | Created subscriber.                            |\n  | 500              | SERVER ERROR| If any server error occurred                 |",
        "operationId": "GalleryCollectionPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "budweiser@gmail.com"
                  },
                  "date": {
                    "type": "string",
                    "example": "2002-07-15",
                    "format": "date-time",
                    "externalDocs": {
                      "description": "SeeMore",
                      "url": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Subscriber Created"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "63a4522700f6553f757ee87d"
                        },
                        "email": {
                          "type": "string",
                          "example": "budweiser@gmail.com"
                        },
                        "date": {
                          "type": "string",
                          "example": "2022-10-14",
                          "format": "date-time",
                          "externalDocs": {
                            "description": "SeeMore",
                            "url": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6"
                          }
                        }
                      },
                      "required": [
                        "email",
                        "date"
                      ]
                    }
                  }
                }
              }
            },
            "description": "Created Gallery's collection"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation Errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      },
      "get": {
        "tags": [
          "Subscriber"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Returns all subscriber from database",
        "description": "This endpoint will return all subscriber from database.\n    \n__How To__\n\nClick 'try it out'. Then click 'execute'.\n \n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 200              | OK          | Got all subscriber.                            |\n  | 500              | SERVER ERROR| If any server error occurred                 |\n  \n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "numberOfResults": {
                      "type": "boolean",
                      "example": 100
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "6391ae6c1a2b152e773e7942"
                          },
                          "email": {
                            "type": "string",
                            "example": "budweiser@email.com"
                          },
                          "date": {
                            "type": "string",
                            "example": "2022-12-27"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "Subscribers list"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/subscriber/export-to-csv": {
      "get": {
        "tags": [
          "Subscriber"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Download all subscribers list",
        "description": "This endpoint will download subscribers list from database.\n    \n__How To__\n\nClick 'try it out'. Then click 'execute'.\n \n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 200              | OK          | Downloaded all subscriber.                            |\n  | 500              | SERVER ERROR| If any server error occurred                 |\n  \n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    }
                  }
                }
              }
            },
            "description": "Subscribers list"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/subscriber/{subscriberId}": {
      "delete": {
        "tags": [
          "Subscriber"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete a subscriber",
        "description": "__How To__\n\n1. If you dont have a subscriberId hit an endpoint **GET /api/subscriber** and get a valid subscriberId. \n2. Fill the subscriberId and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this subscriberId not found.              |\n  | 422              | BAD REQUEST | If the subscriberId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "subscriberDELETE",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63a4522700f6553f757ee87d"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully deleted"
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "subscriberId not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/must-see-event": {
      "get": {
        "tags": [
          "Must See Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Returns all must see events from database",
        "description": "\n\n__How To__\n\nClick 'try it out'. Then click 'execute'.\n \n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 200              | OK          | Return all must see events.                            |\n  | 500              | SERVER ERROR| If any server error occurred                 |\n  \n",
        "operationId": "mustSeeEventsGET",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "numberOfResults": {
                      "type": "boolean",
                      "example": 100
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/MustSeeEvent"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "63a4522700f6553f757ee87d"
                              },
                              "eventData": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Event"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "seoFriendlyURL": {
                                        "type": "string",
                                        "example": "cabaret-show-by-wild-cabaret-2023-01-21"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "description": "Must See Events List"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      },
      "post": {
        "tags": [
          "Must See Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Create a new must see event",
        "description": "\n\n__How To__\n\nFill the **request body** with the data you want to create and click **execute**.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                      |\n  | ---------------- | ------------| -----------------------------------------   |\n  | 201              | CREATED     | Created one must see event.                         |\n | 404              | NOT FOUND     | Event not found.                         |\n   | 403              | FORBIDDEN | If user unauthenticated. |\n  | 422              | BAD REQUEST | If the must see event data is in an invalid format. |\n | 500              | SERVER ERROR| If any server error occurred                 |\n",
        "operationId": "mustSeeEventPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MustSeeEventWithoutImages"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Must See Event created successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "6396d77af21cd7c7776ed4c6"
                            },
                            "order": {
                              "type": "number",
                              "example": 0
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/MustSeeEvent"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Must See Event created successfully"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Data not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided or data invalid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/must-see-event/{mustSeeEventId}": {
      "get": {
        "security": [
          {
            "SessionToken": []
          }
        ],
        "tags": [
          "Must See Events"
        ],
        "summary": "Get a Must See Event by ObjectID",
        "description": "\n\n__How To__\n\nIf you dont have a mustSeeEventId hit an endpoint **GET /api/must-see-events** and get a valid mustSeeEventId\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Return one must see event.                       |\n  | 404              | NOT FOUND   | If this mustSeeEventId not found.              |\n  | 422              | BAD REQUEST | If the mustSeeEventId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "mustSeeEventGET",
        "parameters": [
          {
            "name": "mustSeeEventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return one must see event.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "6396d77af21cd7c7776ed4c6"
                            },
                            "order": {
                              "type": "number",
                              "example": 0
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/MustSeeEvent"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation Errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Must See Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Update a Must See Event",
        "description": "\n\n__How To__\n\nIf you dont have a mustSeeEventId hit an endpoint **GET /api/must-see-event** and get a valid mustSeeEventId\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Must See Event updated.                       |\n  | 400              | BAD REQUEST | Requested with invalid data.              |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this mustSeeEventId not found.              |\n  | 422              | Unprocessable Entity | If the submitted data is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "mustSeeEventPUT",
        "parameters": [
          {
            "name": "mustSeeEventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MustSeeEventWithoutImages"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Must See Event updated.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "Updated successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "634fb000db57c5d00b37c658"
                            },
                            "order": {
                              "type": "number",
                              "example": 0
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/MustSeeEvent"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: Unauthenticated"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Must See Event not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id format provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Must See Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete a must see event and it's related images using objectID",
        "description": "\n\n__How To__\n\n1. If you dont have a mustSeeEventId hit an endpoint **GET /api/must-see-event** and get a valid mustSeeEventId. \n2. Fill the mustSeeEventId and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this must see event not found.              |\n  | 422              | BAD REQUEST | If the mustSeeEventId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "mustSeeEventDELETE",
        "parameters": [
          {
            "name": "mustSeeEventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully deleted"
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Must See Event not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/must-see-event/upload-desktop-image/{mustSeeEventId}": {
      "post": {
        "tags": [
          "Must See Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Upload a Must See Event desktop image",
        "description": "\n\n__How To__\n\n1. If you dont have a mustSeeEventId hit an endpoint **GET /api/must-see-event** and get a valid mustSeeEventId\n2. Fill the mustSeeEventId.\n3. Select image to upload and click execute\n\n**Accepted image formats**\n1. png\n\n2. jpg\n\n3. jpeg\n\n **Accepted size and dimensions (width & height)** \n\nDesktop banner size : under 500kb\n\nwidth: 515px\n\nheight: 550px\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 201              | CREATED          | Must See Event desktop image created successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this must see event not found.              |\n  | 422              | BAD REQUEST | If the mustSeeEventId is in an invalid format or body is not according to validations. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "mustSeeEventDesktopImagePOST",
        "parameters": [
          {
            "name": "mustSeeEventId",
            "in": "path",
            "required": true,
            "description": "The Id of the Must See Event to upload desktop image",
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "object",
                "properties": {
                  "desktopImage": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Must See Event desktop image successfully uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Uploaded successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "63982444dd330c6edc3e3c9b"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/MustSeeEvent"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "ObjectID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Must See Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete the desktop image of a must see event using mustSeeEventId",
        "description": "\n\n__How To__\n\n1. If you dont have a mustSeeEventId hit an endpoint **GET /api/must-see-event** and get a valid mustSeeEventId. \n2. Fill the mustSeeEventId and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Image deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this mustSeeEventId not found.              |\n  | 422              | BAD REQUEST | If the mustSeeEventId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "mustSeeEventDesktopImageDELETE",
        "parameters": [
          {
            "name": "mustSeeEventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully deleted"
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Must See Event not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/must-see-event/upload-mobile-image/{mustSeeEventId}": {
      "post": {
        "tags": [
          "Must See Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Upload a Must See Event mobile image",
        "description": "\n\n__How To__\n\n1. If you dont have a mustSeeEventId hit an endpoint **GET /api/must-see-event** and get a valid mustSeeEventId\n2. Fill the mustSeeEventId.\n3. Select image to upload and click execute\n\n**Accepted image formats**\n1. png\n\n2. jpg\n\n3. jpeg\n\n **Accepted size and dimensions (width & height)** \n\nDesktop banner size : under 200kb\n\nwidth: 250px\n\nheight: 270px\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 201              | CREATED          | Must See Event mobile image created successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this must see event not found.              |\n  | 422              | BAD REQUEST | If the mustSeeEventId is in an invalid format or body is not according to validations. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "mustSeeEventMobileImagePOST",
        "parameters": [
          {
            "name": "mustSeeEventId",
            "in": "path",
            "required": true,
            "description": "The Id of the Must See Event to upload mobile image",
            "schema": {
              "type": "string",
              "example": "63844c8bc1e969f2934f09f7"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "object",
                "properties": {
                  "desktopImage": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Must See Event mobile image successfully uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "Uploaded successfully"
                    },
                    "result": {
                      "allOf": [
                        {
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "63982444dd330c6edc3e3c9b"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/MustSeeEvent"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return400"
                }
              }
            },
            "description": "Data not received from user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "ObjectID not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error."
          }
        }
      },
      "delete": {
        "tags": [
          "Must See Events"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Delete the mobile image of a must see event using mustSeeEventId",
        "description": "\n\n__How To__\n\n1. If you dont have a mustSeeEventId hit an endpoint **GET /api/must-see-event** and get a valid mustSeeEventId. \n2. Fill the mustSeeEventId and execute.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n  | Status Code      | Description | Reason                                   |\n  | ---------------- | ------------| -----------------------------------------|\n  | 200              | OK          | Image deleted successfully.                       |\n  | 403              | FORBIDDEN | If user unauthenticated. |\n  | 404              | NOT FOUND   | If this mustSeeEventId not found.              |\n  | 422              | BAD REQUEST | If the mustSeeEventId is in an invalid format. |\n  | 500              | SERVER ERROR| If server error encountered.             |\n",
        "operationId": "mustSeeEventMobileImageDELETE",
        "parameters": [
          {
            "name": "mustSeeEventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6399bf322f332f8babe66407"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "successfully deleted"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "637487643672cb71ea1444cd"
                            },
                            "desktopImage": {
                              "type": "string",
                              "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/image2"
                            },
                            "mobileImage": {
                              "type": "string",
                              "example": ""
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/MustSeeEventWithoutImages"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return403"
                }
              }
            },
            "description": "Forbidden: If user unauthenticated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return404"
                }
              }
            },
            "description": "Must See Event not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Invalid Id provided"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/book-venue": {
      "post": {
        "tags": [
          "Book Venue"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Submit a Book Venue request",
        "description": "\n\n__How To__\n\nFill the **request body** with the data you want to create and click **execute**.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n|Status Code|Description|Reason|\n|-|-|-|\n|201|CREATED|Created one book venue request.|\n|422|Unprocessable Entity|If the book venue form data is in an invalid format.|\n|500|SERVER ERROR|If any server error occurred|\n\n **Below are the all possible fields**\n\n **occasion** => Birthday, Naming day/Christening, Kids Birthday, Wedding,Charity, Funeral, Corporate, Christmas, General, Others \n\n **requireFood** => Yes, No \n\n **foodLookingFor** => Table Service ,Buffet Style\n\n **whatTypeOfFoodPreferred** => 'Finger food' buffet, Traditional Buffet,Set menu (chosen between customer and our head chef)\n\n **dietaryOrAllergiesRequirements** Yes ,No \n\n **drinksServed** Table Service,Bar Service \n\n**drinksOnArrival** => Yes ,No \n\n **entertainmentProvidedByUs**=> Yes,No\n\n **whatTypeOfEntertainmentProvidedByUs** => Singer, DJ ,Band, Comedian,Kids Entertainer, Magician, Other\n\n **externalCompaniesToDecorate** =>  Yes, No \n\n **alcoholPackages** => Yes, No",
        "operationId": "bookVenuePOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookVenue"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "CREATED"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "6396d77af21cd7c7776ed4c6"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/BookVenue"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Book Venue form submitted successfully"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation Errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/contact-us": {
      "post": {
        "tags": [
          "Contact Us"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Submit a Contact Us request",
        "description": "\n\n__How To__\n\nFill the **request body** with the data you want to create and click **execute**.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n|Status Code|Description|Reason|\n|-|-|-|\n|201|CREATED|Created one contact us request.|\n|422|Unprocessable Entity|If the form data is in an invalid format.|\n|500|SERVER ERROR|If any server error occurred|\n",
        "operationId": "contactUsPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUs"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 201
                    },
                    "msg": {
                      "type": "string",
                      "example": "CREATED"
                    },
                    "result": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "6396d77af21cd7c7776ed4c6"
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/ContactUs"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Contact Us form submitted successfully"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return422"
                }
              }
            },
            "description": "Validation Errors"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    },
    "/api/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "SessionToken": []
          }
        ],
        "summary": "Returns settings of server",
        "description": "This endpoint will return environment settings of server",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "msg": {
                      "type": "string",
                      "example": "success"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "environment": {
                          "type": "string",
                          "example": "V4-Fix"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "Environment server is staging"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return500"
                }
              }
            },
            "description": "Server side error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Return400": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 400
          },
          "msg": {
            "type": "string",
            "example": "Bad Request: {message}"
          }
        }
      },
      "Return403": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 403
          },
          "msg": {
            "type": "string",
            "example": "Forbidden: {message}"
          }
        }
      },
      "Return404": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 404
          },
          "msg": {
            "type": "string",
            "example": "Not Found: {message}"
          }
        }
      },
      "Return405": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 405
          },
          "msg": {
            "type": "string",
            "example": "Method Not Allowed: {message}"
          }
        }
      },
      "Return422": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 422
          },
          "msg": {
            "type": "string",
            "example": "Unprocessable Entity"
          },
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationError"
                }
              ]
            }
          }
        }
      },
      "Return500": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 500
          },
          "msg": {
            "type": "string",
            "example": "Internal Server Error: {message}"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string",
            "example": "Provide Password"
          },
          "param": {
            "type": "string",
            "example": "password"
          },
          "location": {
            "type": "string",
            "example": "body"
          }
        }
      },
      "Banner": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BannerWithoutImages"
          },
          {
            "type": "object",
            "properties": {
              "desktopImage": {
                "type": "string",
                "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/image1"
              },
              "mobileImage": {
                "type": "string",
                "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/image2"
              }
            }
          }
        ]
      },
      "BannerWithoutImages": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "The Rocky Horror Tribute Show",
            "minLength": 1,
            "maxLength": 30
          },
          "link": {
            "type": "string",
            "example": "https://www.skiddle.com/whats-on-beta/Glasgow/18-Candleriggs-%28Formerly-Wild-Cabaret%29/The-Rocky-Horror-Tribute-Show-LIVE/35938181/"
          },
          "eventType": {
            "type": "string",
            "enum": [
              "Live",
              "Sold Out",
              "Cancelled",
              "Private Booking"
            ]
          },
          "startDate": {
            "type": "string",
            "example": "2002-07-15",
            "format": "full-date",
            "externalDocs": {
              "description": "SeeMore",
              "url": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6"
            }
          },
          "endDate": {
            "type": "string",
            "example": "2002-07-15",
            "format": "full-date",
            "externalDocs": {
              "description": "SeeMore",
              "url": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6"
            }
          }
        },
        "required": [
          "name",
          "link",
          "eventType",
          "startDate",
          "endDate"
        ]
      },
      "Event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventWithoutImages"
          },
          {
            "type": "object",
            "properties": {
              "desktopImage": {
                "type": "string",
                "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/image1"
              },
              "mobileImage": {
                "type": "string",
                "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/image2"
              }
            }
          }
        ],
        "required": [
          "name",
          "title",
          "shortDescription",
          "mainDescription",
          "link",
          "price",
          "bookingFee",
          "age",
          "eventDate",
          "eventType",
          "showStartTime",
          "doorOpeningTime",
          "displayEventListingFrom"
        ]
      },
      "EventWithoutImages": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Cabaret Show by Wild Cabaret",
            "minLength": 1,
            "maxLength": 40
          },
          "title": {
            "type": "string",
            "example": "Amazing entertainment paired with a 3-course meal",
            "minLength": 1,
            "maxLength": 80
          },
          "shortDescription": {
            "type": "string",
            "example": "Do you have a great event idea and need a space? At 18 Candleriggs we can make it happen!",
            "minLength": 1,
            "maxLength": 160
          },
          "mainDescription": {
            "type": "string",
            "example": "With a bar for adults, soft play, arts and crafts, face painting, performers and balloon artists, there is a great mix for families to let loose and have fun!",
            "minLength": 1,
            "maxLength": 500
          },
          "link": {
            "type": "string",
            "example": "https://www.fatsoma.com/e/fs8b16xn/freaky-friday",
            "minLength": 1
          },
          "price": {
            "type": "string",
            "example": 10,
            "minLength": 1
          },
          "bookingFee": {
            "type": "number",
            "example": 1,
            "minimum": 0
          },
          "age": {
            "type": "string",
            "enum": [
              "18+",
              "all ages",
              "don't show"
            ]
          },
          "eventDate": {
            "type": "string",
            "example": "2002-07-15",
            "format": "full-date",
            "externalDocs": {
              "description": "SeeMore",
              "url": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6"
            }
          },
          "eventType": {
            "type": "string",
            "enum": [
              "Live",
              "Sold Out",
              "Cancelled",
              "Private Booking"
            ]
          },
          "startTime": {
            "type": "string",
            "example": "6pm",
            "minLength": 1
          },
          "doorOpeningTime": {
            "type": "string",
            "example": "8pm",
            "minLength": 1
          },
          "displayEventListingFrom": {
            "type": "string",
            "example": "2002-07-15",
            "format": "full-date",
            "externalDocs": {
              "description": "SeeMore",
              "url": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6"
            }
          },
          "seoTitle": {
            "type": "string",
            "example": "Book Venue - 18 Candleriggs",
            "minLength": 1,
            "maxLength": 60
          },
          "seoDescription": {
            "type": "string",
            "example": "Are you in a mood to have fun? We are here to help. Get in touch with Us.",
            "minLength": 1,
            "maxLength": 155
          },
          "performer": {
            "type": "string",
            "example": "John doe",
            "minLength": 0
          },
          "organizer": {
            "type": "string",
            "example": "Andrew tate",
            "minLength": 0
          },
          "organizerUrl": {
            "type": "string",
            "example": "https://bestorganizer.com",
            "minLength": 0
          }
        },
        "required": [
          "name",
          "title",
          "shortDescription",
          "mainDescription",
          "link",
          "price",
          "bookingFee",
          "age",
          "eventDate",
          "eventType",
          "showStartTime",
          "doorOpeningTime",
          "displayEventListingFrom"
        ]
      },
      "Image": {
        "type": "object",
        "properties": {
          "desktopImage": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Gallery": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GalleryWithoutImages"
          },
          {
            "type": "object",
            "properties": {
              "smallWebImage": {
                "type": "string",
                "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
              },
              "bigWebImage": {
                "type": "string",
                "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
              },
              "smallMobileImage": {
                "type": "string",
                "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
              },
              "bigMobileImage": {
                "type": "string",
                "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
              }
            }
          }
        ]
      },
      "GalleryWithoutImages": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "Venue",
              "Events",
              "Food"
            ]
          },
          "name": {
            "type": "string",
            "example": "Turkish Eggs"
          },
          "uploadedDate": {
            "type": "string",
            "example": "2002-07-15",
            "format": "full-date",
            "externalDocs": {
              "description": "SeeMore",
              "url": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6"
            }
          },
          "order": {
            "type": "number",
            "example": 0
          },
          "altText": {
            "type": "string",
            "example": "Girl in jacket"
          }
        },
        "required": [
          "name",
          "category"
        ]
      },
      "MustSeeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MustSeeEventWithoutImages"
          },
          {
            "type": "object",
            "properties": {
              "desktopImage": {
                "type": "string",
                "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
              },
              "mobileImage": {
                "type": "string",
                "example": "https://18-candleriggs.fra1.digitaloceanspaces.com/11671713808569"
              }
            }
          }
        ]
      },
      "MustSeeEventWithoutImages": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "example": "6375066bf27e772662684fec"
          },
          "order": {
            "type": "number",
            "example": 0
          },
          "showEventDetails": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "BookVenue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Smith"
          },
          "email": {
            "type": "string",
            "example": "my@email.com"
          },
          "contactNumber": {
            "type": "string",
            "example": "+447414799888"
          },
          "numberOfGuests": {
            "type": "number",
            "example": 10
          },
          "occasion": {
            "type": "string",
            "enum": [
              "Birthday",
              "Naming day/Christening",
              "Kids Birthday",
              "Wedding",
              "Charity",
              "Funeral",
              "Corporate",
              "Christmas",
              "General",
              "Others"
            ]
          },
          "occasionOtherDescription": {
            "type": "string",
            "example": "A special type of party"
          },
          "preferredDate": {
            "type": "string",
            "example": "2002-07-15",
            "format": "full-date",
            "externalDocs": {
              "description": "SeeMore",
              "url": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6"
            }
          },
          "preferredDateOtherNotes": {
            "type": "string",
            "example": "Will update"
          },
          "requireFood": {
            "type": "string",
            "enum": [
              "Yes",
              "No"
            ]
          },
          "foodLookingFor": {
            "type": "string",
            "enum": [
              "Table Service",
              "Buffet Style"
            ]
          },
          "whatTypeOfFoodPreferred": {
            "type": "string",
            "enum": [
              "'Finger food' buffet",
              "Traditional Buffet",
              "Set menu (chosen between customer and our head chef)"
            ]
          },
          "dietaryOrAllergiesRequirements": {
            "type": "string",
            "enum": [
              "Yes",
              "No"
            ]
          },
          "dietaryOrAllergiesRequirementsDescription": {
            "type": "string",
            "example": "No"
          },
          "drinksServed": {
            "type": "string",
            "enum": [
              "Table Service",
              "Bar Service"
            ]
          },
          "drinksOnArrival": {
            "type": "string",
            "enum": [
              "Yes",
              "No"
            ]
          },
          "entertainmentProvidedByUs": {
            "type": "string",
            "enum": [
              "Yes",
              "No"
            ]
          },
          "whatTypeOfEntertainmentProvidedByUs": {
            "type": "string",
            "enum": [
              "Singer",
              "DJ",
              "Band",
              "Comedian",
              "Kids Entertainer",
              "Magician",
              "Other"
            ]
          },
          "externalCompaniesToDecorate": {
            "type": "string",
            "enum": [
              "Yes",
              "No"
            ]
          },
          "alcoholPackages": {
            "type": "string",
            "enum": [
              "Yes",
              "No"
            ]
          }
        },
        "required": [
          "name",
          "email",
          "contactNumber"
        ]
      },
      "ContactUs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Smith"
          },
          "email": {
            "type": "string",
            "example": "my@email.com"
          },
          "contactNumber": {
            "type": "string",
            "example": "+447414799888"
          },
          "additionalRequest": {
            "type": "string",
            "example": "No"
          }
        }
      }
    }
  }
}